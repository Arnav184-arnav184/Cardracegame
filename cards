// File: index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Card Race Game</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div id="root"></div>
    <script type="text/babel" src="game.js"></script>
</body>
</html>

// File: game.js
const UserContext = React.createContext();

const UserProvider = ({ children }) => {
    const [user, setUser] = React.useState(null);

    React.useEffect(() => {
        // Load user data from localStorage on startup
        const savedUser = localStorage.getItem('user');
        if (savedUser) {
            setUser(JSON.parse(savedUser));
        }
    }, []);

    const login = (username, password) => {
        // Get users from localStorage
        const users = JSON.parse(localStorage.getItem('users') || '{}');
        
        if (users[username] && users[username].password === password) {
            setUser(users[username]);
            localStorage.setItem('user', JSON.stringify(users[username]));
            return true;
        }
        return false;
    };

    const signup = (username, password) => {
        const users = JSON.parse(localStorage.getItem('users') || '{}');
        
        if (users[username]) {
            return false; // User already exists
        }

        const newUser = {
            username,
            password,
            currency: 1000,
            gamesPlayed: 0,
            totalWinnings: 0
        };

        users[username] = newUser;
        localStorage.setItem('users', JSON.stringify(users));
        setUser(newUser);
        localStorage.setItem('user', JSON.stringify(newUser));
        return true;
    };

    const updateUser = (updates) => {
        const updatedUser = { ...user, ...updates };
        setUser(updatedUser);
        
        // Update in users storage
        const users = JSON.parse(localStorage.getItem('users') || '{}');
        users[user.username] = updatedUser;
        localStorage.setItem('users', JSON.stringify(users));
        localStorage.setItem('user', JSON.stringify(updatedUser));
    };

    const logout = () => {
        setUser(null);
        localStorage.removeItem('user');
    };

    return (
        <UserContext.Provider value={{ user, login, signup, logout, updateUser }}>
            {children}
        </UserContext.Provider>
    );
};

const LoginPage = () => {
    const [username, setUsername] = React.useState('');
    const [password, setPassword] = React.useState('');
    const [isSignup, setIsSignup] = React.useState(false);
    const { login, signup } = React.useContext(UserContext);

    const handleSubmit = (e) => {
        e.preventDefault();
        const success = isSignup ? signup(username, password) : login(username, password);
        
        if (!success) {
            alert(isSignup ? 'Username already taken' : 'Invalid credentials');
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="bg-white p-8 rounded-lg shadow-md w-96">
                <h2 className="text-2xl font-bold mb-6">
                    {isSignup ? 'Create Account' : 'Login'}
                </h2>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="w-full p-2 border rounded"
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full p-2 border rounded"
                    />
                    <button
                        type="submit"
                        className="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
                    >
                        {isSignup ? 'Sign Up' : 'Login'}
                    </button>
                </form>
                <button
                    onClick={() => setIsSignup(!isSignup)}
                    className="w-full mt-4 text-blue-500 hover:underline"
                >
                    {isSignup ? 'Already have an account? Login' : 'Need an account? Sign Up'}
                </button>
            </div>
        </div>
    );
};

const CardRaceGame = () => {
    const { user, updateUser } = React.useContext(UserContext);
    const [positions, setPositions] = React.useState([0, 0, 0, 0]);
    const [deck, setDeck] = React.useState([]);
    const [userBet, setUserBet] = React.useState(null);
    const [betAmount, setBetAmount] = React.useState(100);
    const [gameStarted, setGameStarted] = React.useState(false);
    const [verticalCards, setVerticalCards] = React.useState(Array(7).fill({ hidden: true }));
    const [winner, setWinner] = React.useState(null);
    const [gameLog, setGameLog] = React.useState([]);

    const SUITS = ['♥', '♦', '♣', '♠'];
    const SUIT_NAMES = ['hearts', 'diamonds', 'clubs', 'spades'];
    const SUIT_COLORS = {
        '♥': 'text-red-500',
        '♦': 'text-red-500',
        '♣': 'text-gray-900',
        '♠': 'text-gray-900'
    };

    // Game logic functions (same as before)
    // ... (include all the game logic from the previous version)

    const handleWin = () => {
        updateUser({
            currency: user.currency + (betAmount * 2),
            totalWinnings: user.totalWinnings + betAmount,
            gamesPlayed: user.gamesPlayed + 1
        });
    };

    const handleLoss = () => {
        updateUser({
            currency: user.currency - betAmount,
            gamesPlayed: user.gamesPlayed + 1
        });
    };

    // ... (rest of the game component code)
};

const App = () => {
    return (
        <UserProvider>
            <div className="min-h-screen bg-gray-100">
                {React.useContext(UserContext).user ? <CardRaceGame /> : <LoginPage />}
            </div>
        </UserProvider>
    );
};

ReactDOM.render(<App />, document.getElementById('root'));
